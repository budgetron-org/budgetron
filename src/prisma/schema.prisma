// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./schemas"
  useMultipleFiles                 = true
  createInputTypes                 = false
  addIncludeType                   = false
  addSelectType                    = false
  createOptionalDefaultValuesTypes = true
  writeNullishInModelTypes         = true
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  clerkId           String             @unique
  households        Household[]
  memberOf          HouseholdMembers[]
  settings          UserSettings?
  transactions      Transaction[]
  monthAggregations MonthAggregation[]
  yearAggregations  YearAggregation[]
  categories        Category[]
  budgets           Budget[]
  accounts          Account[]
}

model Household {
  id           String             @id @default(uuid())
  owner        User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  icon         String             @default("house")
  name         String
  currency     String
  transactions Transaction[]
  categories   Category[]
  members      HouseholdMembers[]
}

model HouseholdMembers {
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@id([householdId, userId])
}

model UserSettings {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  currency String

  @@unique([userId])
}

model Category {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  household    Household?      @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId  String?
  user         User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  name         String
  icon         String
  type         TransactionType
  transactions Transaction[]
  budgets      Budget[]

  @@unique([householdId, userId, name, type])
}

model Account {
  id           String        @id @default(uuid())
  name         String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions Transaction[]

  @@unique([name, userId])
}

model Transaction {
  id          String          @id @default(uuid())
  externalId  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  household   Household?      @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId String?
  description String
  currency    Currency
  account     Account?        @relation(fields: [accountId], references: [id], onDelete: SetNull)
  accountId   String?
  amount      Decimal
  type        TransactionType @default(expense)
  date        DateTime
  category    Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?

  @@unique([externalId]) // Ensures external transaction IDs remain unique
  @@index([userId, date]) // Speeds up queries filtering by user and date
  @@index([householdId]) // Optimizes household-based queries
  @@index([categoryId]) // Speeds up category lookups
}

model MonthAggregation {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  day      Int
  month    Int
  year     Int
  income   Decimal
  spending Decimal

  @@id([userId, day, month, year])
}

model YearAggregation {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  month    Int
  year     Int
  income   Decimal
  spending Decimal

  @@id([userId, month, year])
}

model Budget {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  amount     Decimal

  @@id([userId, categoryId])
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  INR
}

enum TransactionType {
  income
  expense
}
